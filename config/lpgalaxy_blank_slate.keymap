/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

// GLOBE as RA(ESC) via double tap + remapping in Karabiner / mouse pointer, scrolling and keys via remapping in Karabiner

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define SYS_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
        mouse_l: mouse_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp J>
		, <&macro_pause_for_release>
		, <&macro_release &kp J>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_u: mouse_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp I>
		, <&macro_pause_for_release>
		, <&macro_release &kp I>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_d: mouse_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp K>
		, <&macro_pause_for_release>
		, <&macro_release &kp K>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_r: mouse_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp L>
		, <&macro_pause_for_release>
		, <&macro_release &kp L>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sd: mouse_sd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp H>
		, <&macro_pause_for_release>
		, <&macro_release &kp H>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_su: mouse_su {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp Y>
		, <&macro_pause_for_release>
		, <&macro_release &kp Y>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sl: mouse_sl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp O>
		, <&macro_pause_for_release>
		, <&macro_release &kp O>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sr: mouse_sr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp P>
		, <&macro_pause_for_release>
		, <&macro_release &kp P>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_lbtn: mouse_lbtn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp SPACE>
		, <&macro_pause_for_release>
		, <&macro_release &kp SPACE>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_rbtn: mouse_rbtn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp RGUI>
		, <&macro_pause_for_release>
		, <&macro_release &kp RGUI>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
    };
    
    behaviors {
	td0: hyphen_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_HYPHY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LBKT>, <&kp NON_US_HASH>;
	};
	td1: space_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SPACY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp SPACE>, <&kp RET>;
	};
	td2: bksp_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_BACKOSPACY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp BKSP>, <&kp DEL>;
	};
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <SYM_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
 &kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &td0
 &mo NAV_L  &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI	 &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RSHIFT
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
#endif
#ifdef TBLE_DUAL_2U
 &kp LCTRL  &kp LGUI   &kp LALT   &mo NAV_L         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
#elif defined(TBLE_MIT)
 &kp LCTRL  &mo SYM_L   &kp LGUI  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
#else
 &mt RA(ESC) ESC    &kp LCTRL  &kp LALT   &kp LGUI    &lt NAV_L BKSP   &mo NUM_L      &mo SYM_L         &td1      &kp RGUI    &kp RALT   &mo SYS_L      &kp RET
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&trans	   &trans     &trans     &kp UP      &trans          &kp PG_UP    &mouse_su     &trans         &mouse_u      &mouse_sl  &mouse_sr  &trans
&trans     &trans     &kp LEFT   &kp DOWN    &kp RIGHT       &kp PG_DN    &mouse_sd     &mouse_l       &mouse_d      &mouse_r   &trans     &trans
&trans     &trans     &trans  	 &trans      &kp LG(LEFT)    &kp LG(RIGHT) &kp BKSP     &kp DEL        &trans        &trans     &trans     &trans
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans     &trans     &trans     &trans      &mt LA(LS) BKSP          &kp HOME     &kp END     &mouse_lbtn         &mouse_rbtn      &trans     &trans     &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp F1     &kp F2   	&kp F3 	&kp F4 	&kp F5    &kp F6   &kp F7    &kp F8     &kp F9      &kp F10      &kp F11    &kp F12
&kp NUBS   &kp N1	&kp N2 	&kp N3 	&kp N4    &kp N5   &kp N6    &kp N7     &kp N8      &kp N9       &kp N0     &kp NON_US_HASH
&trans     &trans	&trans 	&trans 	&trans    &trans   &trans    &trans     &trans      &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans     &trans       &trans  &trans  &trans    &none     &none     &trans    &trans      &trans 	 &trans     &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &trans     	 &kp LS(N3)   &kp LS(N4)    &kp LA(E)     &kp BSLH     &kp LS(N6)       &kp LS(N2) 	&kp LS(BSLH) 	&kp EQUAL    	&kp LS(EQUAL)   &trans
&trans     &kp LA(N8) 	 &kp LA(N9)   &kp GRAVE     &kp LS(GRAVE) &kp LS(N1)   &kp LS(NUHS)     &kp LS(N8)   	&kp LS(N9)  	&kp LA(N5)   	&kp LA(N6) 	&trans
&trans     &kp LS(N5)  	 &trans       &trans        &kp RBKT      &kp LS(RBKT) &kp LA(SLASH)    &kp LS(N7)    	&kp LA(N7)  	&kp LA(LS(N7)) 	&kp LS(N0)     	&trans
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans     &trans     &trans  	&trans    &trans     &trans      &trans     &trans   &trans     &trans       &trans     &trans
#endif
            >;
        };

        sys_layer {
            label = "Sys";
            bindings = <
&sys_reset &bootloader  &trans 	&trans 	&trans    &trans   &trans    &bt BT(0)  &bt BT(1)   &bt BT(2)    &bt BT(3)  &bt BT(4)
&trans     &trans	&trans 	&trans 	&trans    &trans   &trans    &trans     &trans      &trans       &trans     &trans
&trans     &trans	&trans 	&trans 	&trans    &trans   &trans    &bt BT_CLR &trans      &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans     &trans       &trans  &trans  &trans    &none     &none     &trans    &trans      &trans 	 &trans     &trans
#endif
            >;
        };

    };
};

